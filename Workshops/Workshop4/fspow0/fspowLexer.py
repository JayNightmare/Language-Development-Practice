# Generated from fspow.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,123,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,5,
        10,91,8,10,10,10,12,10,94,9,10,1,11,1,11,5,11,98,8,11,10,11,12,11,
        101,9,11,1,11,1,11,1,11,1,12,4,12,107,8,12,11,12,12,12,108,1,12,
        1,12,1,13,1,13,1,13,1,13,5,13,117,8,13,10,13,12,13,120,9,13,1,13,
        1,13,1,99,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,1,0,4,2,0,65,90,97,122,3,0,48,57,65,90,97,122,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,126,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,0,0,5,33,1,0,0,0,7,
        35,1,0,0,0,9,50,1,0,0,0,11,59,1,0,0,0,13,64,1,0,0,0,15,66,1,0,0,
        0,17,72,1,0,0,0,19,80,1,0,0,0,21,88,1,0,0,0,23,95,1,0,0,0,25,106,
        1,0,0,0,27,112,1,0,0,0,29,30,5,61,0,0,30,2,1,0,0,0,31,32,5,40,0,
        0,32,4,1,0,0,0,33,34,5,41,0,0,34,6,1,0,0,0,35,36,5,70,0,0,36,37,
        5,105,0,0,37,38,5,108,0,0,38,39,5,101,0,0,39,40,5,67,0,0,40,41,5,
        111,0,0,41,42,5,108,0,0,42,43,5,108,0,0,43,44,5,101,0,0,44,45,5,
        99,0,0,45,46,5,116,0,0,46,47,5,105,0,0,47,48,5,111,0,0,48,49,5,110,
        0,0,49,8,1,0,0,0,50,51,5,83,0,0,51,52,5,101,0,0,52,53,5,108,0,0,
        53,54,5,101,0,0,54,55,5,99,0,0,55,56,5,116,0,0,56,57,5,111,0,0,57,
        58,5,114,0,0,58,10,1,0,0,0,59,60,5,110,0,0,60,61,5,97,0,0,61,62,
        5,109,0,0,62,63,5,101,0,0,63,12,1,0,0,0,64,65,5,46,0,0,65,14,1,0,
        0,0,66,67,5,97,0,0,67,68,5,112,0,0,68,69,5,112,0,0,69,70,5,108,0,
        0,70,71,5,121,0,0,71,16,1,0,0,0,72,73,5,112,0,0,73,74,5,114,0,0,
        74,75,5,105,0,0,75,76,5,110,0,0,76,77,5,116,0,0,77,78,5,40,0,0,78,
        79,5,41,0,0,79,18,1,0,0,0,80,81,5,109,0,0,81,82,5,101,0,0,82,83,
        5,115,0,0,83,84,5,115,0,0,84,85,5,97,0,0,85,86,5,103,0,0,86,87,5,
        101,0,0,87,20,1,0,0,0,88,92,7,0,0,0,89,91,7,1,0,0,90,89,1,0,0,0,
        91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,22,1,0,0,0,94,92,1,
        0,0,0,95,99,5,34,0,0,96,98,9,0,0,0,97,96,1,0,0,0,98,101,1,0,0,0,
        99,100,1,0,0,0,99,97,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,
        103,5,34,0,0,103,104,6,11,0,0,104,24,1,0,0,0,105,107,7,2,0,0,106,
        105,1,0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,
        110,1,0,0,0,110,111,6,12,1,0,111,26,1,0,0,0,112,113,5,47,0,0,113,
        114,5,47,0,0,114,118,1,0,0,0,115,117,8,3,0,0,116,115,1,0,0,0,117,
        120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,
        118,1,0,0,0,121,122,6,13,2,0,122,28,1,0,0,0,5,0,92,99,108,118,3,
        1,11,0,6,0,0,0,1,0
    ]

class fspowLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    ID = 11
    STRING = 12
    WS = 13
    COMMENT = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "'FileCollection'", "'Selector'", "'name'", 
            "'.'", "'apply'", "'print()'", "'message'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "STRING", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "ID", "STRING", "WS", "COMMENT" ]

    grammarFileName = "fspow.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[11] = self.STRING_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     


