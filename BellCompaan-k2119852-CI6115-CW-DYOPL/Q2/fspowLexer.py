# Generated from fspow.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,149,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,5,13,118,8,13,10,13,12,13,121,9,13,1,14,1,14,5,14,125,8,14,10,
        14,12,14,128,9,14,1,14,1,14,1,15,4,15,133,8,15,11,15,12,15,134,1,
        15,1,15,1,16,1,16,1,16,1,16,5,16,143,8,16,10,16,12,16,146,9,16,1,
        16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,5,2,0,65,90,97,122,4,
        0,48,57,65,90,95,95,97,122,1,0,34,34,3,0,9,10,13,13,32,32,2,0,10,
        10,13,13,152,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,37,1,0,0,0,5,52,
        1,0,0,0,7,54,1,0,0,0,9,56,1,0,0,0,11,65,1,0,0,0,13,70,1,0,0,0,15,
        75,1,0,0,0,17,80,1,0,0,0,19,90,1,0,0,0,21,94,1,0,0,0,23,101,1,0,
        0,0,25,107,1,0,0,0,27,115,1,0,0,0,29,122,1,0,0,0,31,132,1,0,0,0,
        33,138,1,0,0,0,35,36,5,61,0,0,36,2,1,0,0,0,37,38,5,70,0,0,38,39,
        5,105,0,0,39,40,5,108,0,0,40,41,5,101,0,0,41,42,5,67,0,0,42,43,5,
        111,0,0,43,44,5,108,0,0,44,45,5,108,0,0,45,46,5,101,0,0,46,47,5,
        99,0,0,47,48,5,116,0,0,48,49,5,105,0,0,49,50,5,111,0,0,50,51,5,110,
        0,0,51,4,1,0,0,0,52,53,5,40,0,0,53,6,1,0,0,0,54,55,5,41,0,0,55,8,
        1,0,0,0,56,57,5,83,0,0,57,58,5,101,0,0,58,59,5,108,0,0,59,60,5,101,
        0,0,60,61,5,99,0,0,61,62,5,116,0,0,62,63,5,111,0,0,63,64,5,114,0,
        0,64,10,1,0,0,0,65,66,5,110,0,0,66,67,5,97,0,0,67,68,5,109,0,0,68,
        69,5,101,0,0,69,12,1,0,0,0,70,71,5,115,0,0,71,72,5,105,0,0,72,73,
        5,122,0,0,73,74,5,101,0,0,74,14,1,0,0,0,75,76,5,100,0,0,76,77,5,
        97,0,0,77,78,5,116,0,0,78,79,5,101,0,0,79,16,1,0,0,0,80,81,5,105,
        0,0,81,82,5,110,0,0,82,83,5,116,0,0,83,84,5,101,0,0,84,85,5,114,
        0,0,85,86,5,115,0,0,86,87,5,101,0,0,87,88,5,99,0,0,88,89,5,116,0,
        0,89,18,1,0,0,0,90,91,5,110,0,0,91,92,5,111,0,0,92,93,5,116,0,0,
        93,20,1,0,0,0,94,95,5,46,0,0,95,96,5,97,0,0,96,97,5,112,0,0,97,98,
        5,112,0,0,98,99,5,108,0,0,99,100,5,121,0,0,100,22,1,0,0,0,101,102,
        5,46,0,0,102,103,5,108,0,0,103,104,5,105,0,0,104,105,5,115,0,0,105,
        106,5,116,0,0,106,24,1,0,0,0,107,108,5,109,0,0,108,109,5,101,0,0,
        109,110,5,115,0,0,110,111,5,115,0,0,111,112,5,97,0,0,112,113,5,103,
        0,0,113,114,5,101,0,0,114,26,1,0,0,0,115,119,7,0,0,0,116,118,7,1,
        0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,
        0,0,120,28,1,0,0,0,121,119,1,0,0,0,122,126,5,34,0,0,123,125,8,2,
        0,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,
        0,0,127,129,1,0,0,0,128,126,1,0,0,0,129,130,5,34,0,0,130,30,1,0,
        0,0,131,133,7,3,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,
        0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,137,6,15,0,0,137,32,1,0,
        0,0,138,139,5,47,0,0,139,140,5,47,0,0,140,144,1,0,0,0,141,143,8,
        4,0,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,
        0,0,0,145,147,1,0,0,0,146,144,1,0,0,0,147,148,6,16,0,0,148,34,1,
        0,0,0,5,0,119,126,134,144,1,6,0,0
    ]

class fspowLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    ID = 14
    STRING = 15
    WS = 16
    COMMENT = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'FileCollection'", "'('", "')'", "'Selector'", "'name'", 
            "'size'", "'date'", "'intersect'", "'not'", "'.apply'", "'.list'", 
            "'message'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "STRING", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "ID", 
                  "STRING", "WS", "COMMENT" ]

    grammarFileName = "fspow.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


